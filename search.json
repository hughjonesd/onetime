[{"path":"https://hughjonesd.github.io/onetime/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2020 David Hugh-Jones Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://hughjonesd.github.io/onetime/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"David Hugh-Jones. Author, maintainer.","code":""},{"path":"https://hughjonesd.github.io/onetime/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hugh-Jones D (2022). onetime: Run Code . https://github.com/hughjonesd/onetime, https://hughjonesd.github.io/onetime/.","code":"@Manual{,   title = {onetime: Run Code Only Once},   author = {David Hugh-Jones},   year = {2022},   note = {https://github.com/hughjonesd/onetime, https://hughjonesd.github.io/onetime/}, }"},{"path":[]},{"path":"https://hughjonesd.github.io/onetime/example.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Documentation","text":"","code":"library(onetime) ids  <- paste0(\"onetime-readme-\", sample(1e9, 5L))   for (i in 1:5) {   cat(\"Loop \", i, \" of 5\\n\")   onetime_do(cat(\"This command will only be run once.\\n\"), id = ids[1])   onetime_warning(\"This warning will only be shown once.\", id = ids[2])   onetime_message(\"This message will only be shown once.\", id = ids[3]) } ## Loop  1  of 5 ## This command will only be run once.  ## Warning: This warning will only be shown once.  ## This message will only be shown once.  ## Loop  2  of 5 ## Loop  3  of 5 ## Loop  4  of 5 ## Loop  5  of 5 # Meanwhile, in a separate process: library(callr) result <- callr::r(function (ids) {   onetime::onetime_message(\"This message with an existing ID will not be shown.\", id = ids[1])   onetime::onetime_message(\"This message with a new ID will be shown.\", id = ids[4]) }, show = TRUE, args = list(ids = ids)) ## This message with an existing ID will not be shown. ## This message with a new ID will be shown. # Letting the user hide a message: onetime_message_confirm(\"A message that the user might want to hide.                         In non-interactive sessions, instructions will                         be shown for hiding it manually.\", id = ids[5]) ## A message that the user might want to hide. ##                         In non-interactive sessions, instructions will ##                         be shown for hiding it manually. ## To hide this message in future, run: ##   onetime_mark_as_done(id = \"onetime-readme-483999030\")  ## [1] FALSE"},{"path":"https://hughjonesd.github.io/onetime/index.html","id":"onetime","dir":"","previous_headings":"","what":"Run Code Only Once","title":"Run Code Only Once","text":"Listen carefully. shall say . Michelle Dubois, ’Allo ’Allo onetime package provides convenience functions run R code per user. example, can show startup message first time (ever) package loaded. information, see website.","code":""},{"path":"https://hughjonesd.github.io/onetime/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Run Code Only Once","text":"","code":"library(onetime)  # Setup otd <- tempdir(check = TRUE) oo <- options(onetime.dir = otd) ids  <- paste0(\"onetime-readme-\", sample(1e9, 5L))   for (i in 1:5) {   cat(\"Loop \", i, \" of 5\\n\")   onetime_do(cat(\"This command will only be run once.\\n\"), id = ids[1])   onetime_warning(\"This warning will only be shown once.\", id = ids[2])   onetime_message(\"This message will only be shown once.\", id = ids[3]) } #> Loop  1  of 5 #> This command will only be run once. #> Warning: This warning will only be shown once. #> This message will only be shown once. #> Loop  2  of 5 #> Loop  3  of 5 #> Loop  4  of 5 #> Loop  5  of 5  # Meanwhile, in a separate process: library(callr) result <- callr::r(function (ids, otd) {   options(onetime.dir = otd)   onetime::onetime_message(\"This message with an existing ID will not be shown.\", id = ids[1])   onetime::onetime_message(\"This message with a new ID will be shown.\", id = ids[4]) }, show = TRUE, args = list(ids = ids, otd = otd)) #> This message with a new ID will be shown.   # Letting the user hide a message: onetime_message_confirm(\"A message that the user might want to hide.\\n\",                         \"In non-interactive sessions, instructions will \",                         \"be shown for hiding it manually.\", id = ids[5]) #> A message that the user might want to hide. #> In non-interactive sessions, instructions will be shown for hiding it manually. #> To hide this message in future, run: #>   onetime_mark_as_done(id = \"onetime-readme-786898700\")"},{"path":"https://hughjonesd.github.io/onetime/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Run Code Only Once","text":"Onetime now CRAN. can install : can install development version GitHub :","code":"install.packages(\"onetime\") # install.packages(\"devtools\") devtools::install_github(\"hughjonesd/onetime\")"},{"path":"https://hughjonesd.github.io/onetime/reference/check_ok_to_store.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the package has permission to store files on the user's computer — check_ok_to_store","title":"Check if the package has permission to store files on the user's computer — check_ok_to_store","text":"onetime package works storing lockfiles rappdirs::user_config_dir(). unless permission granted. using onetime functions, package authors call check_ok_to_store(ask = TRUE) interactive session, functions called directly command line.","code":""},{"path":"https://hughjonesd.github.io/onetime/reference/check_ok_to_store.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the package has permission to store files on the user's computer — check_ok_to_store","text":"","code":"check_ok_to_store(   ask = FALSE,   message = \"The onetime package requests to store files in '%s'.\",   confirm_prompt = \"Is this OK? [Yn] \",   confirm_answers = c(\"Y\", \"y\", \"Yes\", \"yes\", \"YES\"),   default_answer = \"Y\" )"},{"path":"https://hughjonesd.github.io/onetime/reference/check_ok_to_store.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the package has permission to store files on the user's computer — check_ok_to_store","text":"ask TRUE ask user permission. message Message display user. confirm_prompt Character string. Question prompt user hide message future. confirm_answers Character vector. Answers cause message hidden future. default_answer Character string. Default answer user simply presses return.","code":""},{"path":"https://hughjonesd.github.io/onetime/reference/check_ok_to_store.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the package has permission to store files on the user's computer — check_ok_to_store","text":"TRUE : already permission; ask TRUE, interactive session user gives us permission; options(\"onetime.dir\") set non-NULL value. Otherwise FALSE.","code":""},{"path":"https://hughjonesd.github.io/onetime/reference/check_ok_to_store.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check if the package has permission to store files on the user's computer — check_ok_to_store","text":"package used interactively, workaround call set_ok_to_store(). grants permission prints informative message. Package owners call ask explicitly. onetime_message_confirm() exception: default require global permission store files, since user accepting \"show \" considered sufficient. ask = TRUE asks user, already given permission, session interactive(). Remaining parameters passed onetime_message_confirm() case, ignored otherwise. \"%s\" message replaced onetime storage directory.","code":""},{"path":"https://hughjonesd.github.io/onetime/reference/check_ok_to_store.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if the package has permission to store files on the user's computer — check_ok_to_store","text":"","code":"check_ok_to_store() #> [1] FALSE"},{"path":"https://hughjonesd.github.io/onetime/reference/onetime-rlang.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a warning or message only once using rlang functions — onetime-rlang","title":"Print a warning or message only once using rlang functions — onetime-rlang","text":"use need add \"rlang\" package dependencies.","code":""},{"path":"https://hughjonesd.github.io/onetime/reference/onetime-rlang.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a warning or message only once using rlang functions — onetime-rlang","text":"","code":"onetime_rlang_warn(   ...,   id = calling_package(),   path = default_lockfile_dir(),   expiry = NULL,   without_permission = \"warn\" )  onetime_rlang_inform(   ...,   id = calling_package(),   path = default_lockfile_dir(),   expiry = NULL,   without_permission = \"warn\" )"},{"path":"https://hughjonesd.github.io/onetime/reference/onetime-rlang.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a warning or message only once using rlang functions — onetime-rlang","text":"... Passed rlang::warn() rlang::inform(). id Unique ID string. default, name calling package. path Directory store lockfiles. expiry difftime() e.g. lubridate::duration() object. length time, code run . without_permission Character string. user given permission store files? \"warn\" runs action extra warning; \"run\" runs action; \"pass\" nothing returns default; \"stop\" throws error; \"ask\" asks permission, running action recording disk.","code":""},{"path":"https://hughjonesd.github.io/onetime/reference/onetime-rlang.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a warning or message only once using rlang functions — onetime-rlang","text":"TRUE message/warning shown, FALSE otherwise.","code":""},{"path":"https://hughjonesd.github.io/onetime/reference/onetime-rlang.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a warning or message only once using rlang functions — onetime-rlang","text":"","code":"oo <- options(onetime.dir = tempdir(check = TRUE)) id <- sample(10000L, 1)  for (n in 1:3) {   onetime_rlang_warn(c(\"rlang-style warning\", i = \"Extra info\"), id = id) } #> Warning: rlang-style warning #> ℹ Extra info  onetime_reset(id = id) options(oo)"},{"path":"https://hughjonesd.github.io/onetime/reference/onetime.html","id":null,"dir":"Reference","previous_headings":"","what":"Run code only once — onetime","title":"Run code only once — onetime","text":"Onetime allows package authors run code (ever) given user. writing file, typically folder user's configuration directory given rappdirs::user_config_dir(). user can set alternative filepath using options(\"onetime.dir\").","code":""},{"path":"https://hughjonesd.github.io/onetime/reference/onetime.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run code only once — onetime","text":"package authors' responsibility check permission store lockfiles. may done already another package onetime already installed. can ask permission interactively command line calling check_ok_to_store() ask = TRUE. Core functions include: onetime_do() runs arbitrary code . onetime_warning() friends print warning message . onetime_message_confirm() prints message asks \"Show message ?\" onetime_rlang_warn() onetime_rlang_inform() print messages using functions rlang package. onetime_only() returns function runs . check_ok_to_store() set_ok_to_store() check grant permission store lockfiles user's computer.","code":""},{"path":"https://hughjonesd.github.io/onetime/reference/onetime.html","id":"example","dir":"Reference","previous_headings":"","what":"Example","title":"Run code only once — onetime","text":"","code":"library(onetime) ids  <- paste0(\"onetime-readme-\", sample(1e9, 5L))   for (i in 1:5) {   cat(\"Loop \", i, \" of 5\\n\")   onetime_do(cat(\"This command will only be run once.\\n\"), id = ids[1])   onetime_warning(\"This warning will only be shown once.\", id = ids[2])   onetime_message(\"This message will only be shown once.\", id = ids[3]) } ## Loop  1  of 5 ## This command will only be run once.  ## Warning: This warning will only be shown once.  ## This message will only be shown once.  ## Loop  2  of 5 ## Loop  3  of 5 ## Loop  4  of 5 ## Loop  5  of 5 # Meanwhile, in a separate process: library(callr) result <- callr::r(function (ids) {   onetime::onetime_message(\"This message with an existing ID will not be shown.\", id = ids[1])   onetime::onetime_message(\"This message with a new ID will be shown.\", id = ids[4]) }, show = TRUE, args = list(ids = ids)) ## This message with an existing ID will not be shown. ## This message with a new ID will be shown. # Letting the user hide a message: onetime_message_confirm(\"A message that the user might want to hide.\\n\",                         \"In non-interactive sessions, instructions will \",                         \"be shown for hiding it manually.\", id = ids[5]) ## A message that the user might want to hide. ## In non-interactive sessions, instructions will be shown for hiding it manually. ## To hide this message in future, run: ##   onetime_mark_as_done(id = \"onetime-readme-726457769\")"},{"path":"https://hughjonesd.github.io/onetime/reference/onetime_been_done.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a onetime call has already been made — onetime_been_done","title":"Check if a onetime call has already been made — onetime_been_done","text":"Check onetime call already made","code":""},{"path":"https://hughjonesd.github.io/onetime/reference/onetime_been_done.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a onetime call has already been made — onetime_been_done","text":"","code":"onetime_been_done(   id = calling_package(),   path = default_lockfile_dir(),   expiry = NULL )"},{"path":"https://hughjonesd.github.io/onetime/reference/onetime_been_done.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a onetime call has already been made — onetime_been_done","text":"id Unique ID string. default, name calling package. path Directory store lockfiles. expiry difftime() e.g. lubridate::duration() object. length time, code run .","code":""},{"path":"https://hughjonesd.github.io/onetime/reference/onetime_been_done.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a onetime call has already been made — onetime_been_done","text":"TRUE call recorded (within expiry time, given).","code":""},{"path":"https://hughjonesd.github.io/onetime/reference/onetime_been_done.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if a onetime call has already been made — onetime_been_done","text":"","code":"oo <- options(onetime.dir = tempdir(check = TRUE)) id <- sample(10000L, 1)  onetime_been_done(id = id) #> [1] FALSE onetime_message(\"Creating an ID\",  id = id) #> Creating an ID #> [1] TRUE onetime_been_done(id = id) #> [1] TRUE  onetime_reset(id = id) options(oo)"},{"path":"https://hughjonesd.github.io/onetime/reference/onetime_do.html","id":null,"dir":"Reference","previous_headings":"","what":"Run code only once — onetime_do","title":"Run code only once — onetime_do","text":"function runs expression just . creates lockfile recording unique ID prevent expression run .","code":""},{"path":"https://hughjonesd.github.io/onetime/reference/onetime_do.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run code only once — onetime_do","text":"","code":"onetime_do(   expr,   id = calling_package(),   path = default_lockfile_dir(),   expiry = NULL,   default = NULL,   without_permission = c(\"warn\", \"run\", \"stop\", \"pass\", \"ask\") )"},{"path":"https://hughjonesd.github.io/onetime/reference/onetime_do.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run code only once — onetime_do","text":"expr code evaluate. R statement expression() object. id Unique ID string. default, name calling package. path Directory store lockfiles. expiry difftime() e.g. lubridate::duration() object. length time, code run . default Value return expr executed. without_permission Character string. user given permission store files? \"warn\" runs action extra warning; \"run\" runs action; \"pass\" nothing returns default; \"stop\" throws error; \"ask\" asks permission, running action recording disk.","code":""},{"path":"https://hughjonesd.github.io/onetime/reference/onetime_do.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run code only once — onetime_do","text":"value expr, invisibly; default expr run run already.","code":""},{"path":"https://hughjonesd.github.io/onetime/reference/onetime_do.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run code only once — onetime_do","text":"Calls identified id. use value id across different calls onetime_do() similar functions, first call get made. default, id just name calling package. common use case single call within package (e.g. first startup). want use multiple calls, calling code within package, must set id explicitly. working large project many contributors, strongly recommended set id  explicitly. default path, lockfiles stored, within rappdirs::user_config_dir() unless overridden options(\"onetime.dir\"). lockfile written (e.g. user given permission store files computer), call still run, may run repeatedly. Conversely, call gives error, lockfile still written. expiry backward-looking. , expiry used check time see lockfile written Sys.time() - expiry. used lockfile created. , set expiry value whenever call onetime_do(). See example.","code":""},{"path":"https://hughjonesd.github.io/onetime/reference/onetime_do.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run code only once — onetime_do","text":"","code":"oo <- options(onetime.dir = tempdir(check = TRUE)) id <- sample(10000L, 1L)  for (n in 1:3) {   onetime_do(print(\"printed once\"), id = id) } #> [1] \"printed once\"  # expiry is \"backward-looking\": id2 <- sample(10000L, 1L) expiry <- as.difftime(1, units = \"secs\") onetime_do(print(\"Expires quickly, right?\"), id = id2, expiry = expiry) #> [1] \"Expires quickly, right?\" #> [1] \"Expires quickly, right?\" Sys.sleep(2) onetime_do(print(\"This won't be shown...\"), id = id2) #> NULL onetime_do(print(\"... but this will\"), id = id2, expiry = expiry) #> [1] \"... but this will\" #> [1] \"... but this will\"   onetime_reset(id = id) onetime_reset(id = id2) options(oo)"},{"path":"https://hughjonesd.github.io/onetime/reference/onetime_mark_as_done.html","id":null,"dir":"Reference","previous_headings":"","what":"Mark an action as done — onetime_mark_as_done","title":"Mark an action as done — onetime_mark_as_done","text":"manually marks action done.","code":""},{"path":"https://hughjonesd.github.io/onetime/reference/onetime_mark_as_done.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mark an action as done — onetime_mark_as_done","text":"","code":"onetime_mark_as_done(id = calling_package(), path = default_lockfile_dir())"},{"path":"https://hughjonesd.github.io/onetime/reference/onetime_mark_as_done.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mark an action as done — onetime_mark_as_done","text":"id Unique ID string. default, name calling package. path Directory store lockfiles.","code":""},{"path":"https://hughjonesd.github.io/onetime/reference/onetime_mark_as_done.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mark an action as done — onetime_mark_as_done","text":"Invisible TRUE action represented id done , now explicitly marked done. Invisible FALSE already marked done (still ).","code":""},{"path":"https://hughjonesd.github.io/onetime/reference/onetime_mark_as_done.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Mark an action as done — onetime_mark_as_done","text":"Note expiry parameter available, expiry backward-looking. See onetime_do() information. Marking action done requires permission store files user's computer, just like onetime actions.","code":""},{"path":"https://hughjonesd.github.io/onetime/reference/onetime_mark_as_done.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mark an action as done — onetime_mark_as_done","text":"","code":"oo <- options(onetime.dir = tempdir(check = TRUE)) id <- sample(10000L, 1)  onetime_mark_as_done(id = id) onetime_message(\"Won't be shown\", id = id) #> [1] FALSE  onetime_reset(id = id) options(oo)"},{"path":"https://hughjonesd.github.io/onetime/reference/onetime_message_confirm.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a message, and ask for confirmation to hide it in future — onetime_message_confirm","title":"Print a message, and ask for confirmation to hide it in future — onetime_message_confirm","text":"uses readline() ask user message shown future.","code":""},{"path":"https://hughjonesd.github.io/onetime/reference/onetime_message_confirm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a message, and ask for confirmation to hide it in future — onetime_message_confirm","text":"","code":"onetime_message_confirm(   ...,   id = calling_package(),   path = default_lockfile_dir(),   expiry = NULL,   confirm_prompt = \"Show this message again? [yN] \",   confirm_answers = c(\"N\", \"n\", \"No\", \"no\"),   default_answer = \"N\",   require_permission = FALSE,   without_permission = \"warn\",   noninteractive = paste0(\"To hide this message in future, run:\\n\",     \"  onetime_mark_as_done(id = \\\"\", id, \"\\\")\"),   message = deprecated() )"},{"path":"https://hughjonesd.github.io/onetime/reference/onetime_message_confirm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a message, and ask for confirmation to hide it in future — onetime_message_confirm","text":"... Passed message(). id Unique ID string. default, name calling package. path Directory store lockfiles. expiry difftime() e.g. lubridate::duration() object. length time, code run . confirm_prompt Character string. Question prompt user hide message future. confirm_answers Character vector. Answers cause message hidden future. default_answer Character string. Default answer user simply presses return. require_permission Logical. Ask permission store files user's computer, granted? Setting FALSE overrides without_permission. without_permission Character string. user given permission store files? \"warn\" runs action extra warning; \"run\" runs action; \"pass\" nothing returns default; \"stop\" throws error; \"ask\" asks permission, running action recording disk. noninteractive String. Additional message send non-interactive sessions. Set NULL nothing non-interactive sessions. default tells user manually mark message done. message","code":""},{"path":"https://hughjonesd.github.io/onetime/reference/onetime_message_confirm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a message, and ask for confirmation to hide it in future — onetime_message_confirm","text":"NULL message shown (shown already non-interactive session noninteractive NULL). TRUE user confirmed, .e. chose hide message. FALSE message shown user confirm (choose hide message, non-interactive session noninteractive NULL). Results returned invisibly. Note default, TRUE returned user answers \"\" \"Show message ?\" FALSE returned user answers \"yes\".","code":""},{"path":"https://hughjonesd.github.io/onetime/reference/onetime_message_confirm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print a message, and ask for confirmation to hide it in future — onetime_message_confirm","text":"default, message hidden user answers \"n\", \"\", \"N\", just presses return prompt question. Unlike onetime functions, onetime_message_confirm() default require permission store files user's computer. assumption saying \"show message \" counts granting permission (just one message). can ask broader permission setting require_permission = TRUE without_permission = \"ask\".","code":""},{"path":"https://hughjonesd.github.io/onetime/reference/onetime_message_confirm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a message, and ask for confirmation to hide it in future — onetime_message_confirm","text":"","code":"oo <- options(onetime.dir = tempdir(check = TRUE)) id <- sample(10000L, 1L)  onetime_message_confirm(\"A message to show one or more times\", id = id) #> A message to show one or more times #> To hide this message in future, run: #>   onetime_mark_as_done(id = \"3350\")  onetime_reset(id = id) #> Warning: cannot remove file '/tmp/RtmpY14gIc/NO-PACKAGE/3350', reason 'No such file or directory' options(oo)"},{"path":"https://hughjonesd.github.io/onetime/reference/onetime_only.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrap a function to be called only once — onetime_only","title":"Wrap a function to be called only once — onetime_only","text":"takes function returns function wrapped onetime_do(). Use code run , may called multiple locations. frees use id multiple times.","code":""},{"path":"https://hughjonesd.github.io/onetime/reference/onetime_only.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrap a function to be called only once — onetime_only","text":"","code":"onetime_only(   .f,   id = calling_package(),   path = default_lockfile_dir(),   default = NULL,   without_permission = \"warn\" )"},{"path":"https://hughjonesd.github.io/onetime/reference/onetime_only.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrap a function to be called only once — onetime_only","text":".f function id Unique ID string. default, name calling package. path Directory store lockfiles. default Value return .f function executed. without_permission Character string. user given permission store files? \"warn\" runs action extra warning; \"run\" runs action; \"pass\" nothing returns default; \"stop\" throws error; \"ask\" asks permission, running action recording disk.","code":""},{"path":"https://hughjonesd.github.io/onetime/reference/onetime_only.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrap a function to be called only once — onetime_only","text":"wrapped function. function returns result .f,  default inner function called.","code":""},{"path":[]},{"path":"https://hughjonesd.github.io/onetime/reference/onetime_only.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wrap a function to be called only once — onetime_only","text":"","code":"oo <- options(onetime.dir = tempdir(check = TRUE)) id <- sample(10000L, 1)  sample_once <- onetime_only(sample, id = id) sample_once(1:10) #>  [1]  7  4  5  6  9  1  2  3  8 10 sample_once(1:10) #> NULL  onetime_reset(id) options(oo)"},{"path":"https://hughjonesd.github.io/onetime/reference/onetime_reset.html","id":null,"dir":"Reference","previous_headings":"","what":"Reset a onetime call by ID — onetime_reset","title":"Reset a onetime call by ID — onetime_reset","text":"Reset onetime call ID","code":""},{"path":"https://hughjonesd.github.io/onetime/reference/onetime_reset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reset a onetime call by ID — onetime_reset","text":"","code":"onetime_reset(id = calling_package(), path = default_lockfile_dir())"},{"path":"https://hughjonesd.github.io/onetime/reference/onetime_reset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reset a onetime call by ID — onetime_reset","text":"id Unique ID string. default, name calling package. path Directory store lockfiles.","code":""},{"path":"https://hughjonesd.github.io/onetime/reference/onetime_reset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reset a onetime call by ID — onetime_reset","text":"result file.remove(), invisibly.","code":""},{"path":"https://hughjonesd.github.io/onetime/reference/onetime_reset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reset a onetime call by ID — onetime_reset","text":"","code":"oo <- options(onetime.dir = tempdir(check = TRUE)) id <- sample(10000L, 1)  onetime_message(\"will be shown\",  id = id) #> will be shown #> [1] TRUE onetime_message(\"won't be shown\", id = id) #> [1] FALSE onetime_reset(id = id) onetime_message(\"will be shown\",  id = id) #> will be shown #> [1] TRUE  onetime_reset(id = id) options(oo)"},{"path":"https://hughjonesd.github.io/onetime/reference/onetime_warning.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a warning or message only once — onetime_warning","title":"Print a warning or message only once — onetime_warning","text":"functions use onetime_do() print warning message just .","code":""},{"path":"https://hughjonesd.github.io/onetime/reference/onetime_warning.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a warning or message only once — onetime_warning","text":"","code":"onetime_warning(   ...,   id = calling_package(),   path = default_lockfile_dir(),   expiry = NULL,   without_permission = \"warn\" )  onetime_message(   ...,   id = calling_package(),   path = default_lockfile_dir(),   expiry = NULL,   without_permission = \"warn\" )  onetime_startup_message(   ...,   id = calling_package(),   path = default_lockfile_dir(),   expiry = NULL,   without_permission = \"warn\" )"},{"path":"https://hughjonesd.github.io/onetime/reference/onetime_warning.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a warning or message only once — onetime_warning","text":"... Passed warning(), message() packageStartupMessage(). id Unique ID string. default, name calling package. path Directory store lockfiles. expiry difftime() e.g. lubridate::duration() object. length time, code run . without_permission Character string. user given permission store files? \"warn\" runs action extra warning; \"run\" runs action; \"pass\" nothing returns default; \"stop\" throws error; \"ask\" asks permission, running action recording disk.","code":""},{"path":"https://hughjonesd.github.io/onetime/reference/onetime_warning.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a warning or message only once — onetime_warning","text":"TRUE message/warning shown, FALSE otherwise.","code":""},{"path":[]},{"path":"https://hughjonesd.github.io/onetime/reference/onetime_warning.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a warning or message only once — onetime_warning","text":"","code":"oo <- options(onetime.dir = tempdir(check = TRUE)) id <- sample(10000L, 1)  for (n in 1:3) {   onetime_warning(\"will be shown once\", id = id) } #> Warning: will be shown once  onetime_reset(id = id) options(oo)"},{"path":"https://hughjonesd.github.io/onetime/reference/set_ok_to_store.html","id":null,"dir":"Reference","previous_headings":"","what":"Grant or revoke permission to store lockfiles on the user's computer — set_ok_to_store","title":"Grant or revoke permission to store lockfiles on the user's computer — set_ok_to_store","text":"End users may use command line. Package authors call ask permission interactively using check_ok_to_store(ask = TRUE).","code":""},{"path":"https://hughjonesd.github.io/onetime/reference/set_ok_to_store.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Grant or revoke permission to store lockfiles on the user's computer — set_ok_to_store","text":"","code":"set_ok_to_store(ok = TRUE)"},{"path":"https://hughjonesd.github.io/onetime/reference/set_ok_to_store.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Grant or revoke permission to store lockfiles on the user's computer — set_ok_to_store","text":"ok TRUE grant permission store lockfiles, FALSE revoke unset options(\"onetime.dir\").","code":""},{"path":"https://hughjonesd.github.io/onetime/reference/set_ok_to_store.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Grant or revoke permission to store lockfiles on the user's computer — set_ok_to_store","text":"TRUE operation succeeded.","code":""},{"path":"https://hughjonesd.github.io/onetime/reference/set_ok_to_store.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Grant or revoke permission to store lockfiles on the user's computer — set_ok_to_store","text":"","code":"if (FALSE) { set_ok_to_store() }"},{"path":"https://hughjonesd.github.io/onetime/news/index.html","id":"onetime-development-version","dir":"Changelog","previous_headings":"","what":"onetime (development version)","title":"onetime (development version)","text":"New function onetime_mark_as_done() manually mark action done. onetime_message_confirm() now prints message default non-interactive sessions, along instructions hide message using onetime_mark_as_done(). onetime_message_confirm() now passes multiple arguments message() using .... makes easier pass long messages. Using named message argument soft-deprecated. onetime_message_confirm() now returns results invisibly. nicer rmarkdown documents. onetime_only() gains default argument returned wrapper function inner function called. onetime_only() now respects visibility wrapped function.","code":""},{"path":"https://hughjonesd.github.io/onetime/news/index.html","id":"onetime-010","dir":"Changelog","previous_headings":"","what":"onetime 0.1.0","title":"onetime 0.1.0","text":"CRAN release: 2022-11-22 Initial release.","code":""}]
